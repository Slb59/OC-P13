image: docker:20.10.16

stages:
  - quality # merge_requests
  - build
  - test
  - linting
  - package # main
  - deploy
  - cleanup

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

services:
  - name: docker:20.10.16-dind
    alias: docker
    command: ["--tls=false"]

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: alpine
  except:
    - merge_requests
  script:
    - echo "Compiling the code..."
    - docker info
    - docker-compose --version
    - echo "DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY" >> .env
    - echo "DEBUG_VALUE=$DEBUG_VALUE" >> .env
    - echo "HOSTS=$HOSTS" >> .env
    - echo "DATABASE_NAME=$DATABASE_NAME" >> .env
    - echo "DSN_SENTRY=$DSN_SENTRY" >> .env
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - mkdir -p public/build
    - docker compose -f compose/docker-compose.yml build
    - docker images slb59/lettings > public/build/build.html
    - echo "Compile complete."
  artifacts:
    paths:
      - build.html

test-job:
  stage: test
  image: slb59/lettings
  only:
    - merge_requests
  script:
    - echo "Running tests..."
    - pytest
    - echo "Code coverage is ??%"

flake-job:
  stage: quality
  image: docker.io/slb59/django-linting
  only:
    - merge_requests
  script:
    - echo "Linting code..."
    - flake8
    - echo "No lint issues found."

isort-job:
  stage: quality
  image: docker.io/slb59/django-linting
  only:
    - merge_requests
  script:
    - echo "isort import code..."
    - isort . --check
    - echo "see isort report"

black-job:
  stage: quality
  image: docker.io/slb59/django-linting
  only:
    - merge_requests
  script:
    - echo "black checking..."
    - black . --check
    - echo "see black report"

pylint-job:
  stage: linting
  image: slb59/lettings
  only:
    - merge_requests
  script:
    - echo "pylint checking..."
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint --exit-zero --load-plugins=pylint_gitlab --output-format=gitlab-codeclimate $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html
    - echo "pylint process completed, check the report"
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always

package-job:
  stage: package
  only:
    - main
  script:
    - echo "package job working..."
    - sleep 10
    - echo "package job completed"

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  only:
    - master
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

cleanup-job:
  stage: cleanup
  only:
    - main
  script:
    - echo "Clean old pipeline depending on $PIPELINE_KEEP_DAYS variable"
    - sleep 10
    - echo "cleanup completed"
